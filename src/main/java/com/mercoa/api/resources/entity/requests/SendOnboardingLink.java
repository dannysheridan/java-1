/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entity.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import com.mercoa.api.resources.entitytypes.types.EntityOnboardingLinkType;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = SendOnboardingLink.Builder.class)
public final class SendOnboardingLink {
    private final EntityOnboardingLinkType type;

    private final Optional<String> connectedEntityId;

    private SendOnboardingLink(EntityOnboardingLinkType type, Optional<String> connectedEntityId) {
        this.type = type;
        this.connectedEntityId = connectedEntityId;
    }

    /**
     * @return The type of onboarding link to generate. If not provided, the default is payee. The onboarding options are determined by your organization's onboarding configuration.
     */
    @JsonProperty("type")
    public EntityOnboardingLinkType getType() {
        return type;
    }

    /**
     * @return The ID of the entity to connect to. If onboarding a payee, this should be the payor entity ID. If onboarding a payor, this should be the payee entity ID. If no connected entity ID is provided, the onboarding link will be for a standalone entity.
     */
    @JsonProperty("connectedEntityId")
    public Optional<String> getConnectedEntityId() {
        return connectedEntityId;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SendOnboardingLink && equalTo((SendOnboardingLink) other);
    }

    private boolean equalTo(SendOnboardingLink other) {
        return type.equals(other.type) && connectedEntityId.equals(other.connectedEntityId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.type, this.connectedEntityId);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        _FinalStage type(EntityOnboardingLinkType type);

        Builder from(SendOnboardingLink other);
    }

    public interface _FinalStage {
        SendOnboardingLink build();

        _FinalStage connectedEntityId(Optional<String> connectedEntityId);

        _FinalStage connectedEntityId(String connectedEntityId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, _FinalStage {
        private EntityOnboardingLinkType type;

        private Optional<String> connectedEntityId = Optional.empty();

        private Builder() {}

        @Override
        public Builder from(SendOnboardingLink other) {
            type(other.getType());
            connectedEntityId(other.getConnectedEntityId());
            return this;
        }

        /**
         * <p>The type of onboarding link to generate. If not provided, the default is payee. The onboarding options are determined by your organization's onboarding configuration.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("type")
        public _FinalStage type(EntityOnboardingLinkType type) {
            this.type = type;
            return this;
        }

        /**
         * <p>The ID of the entity to connect to. If onboarding a payee, this should be the payor entity ID. If onboarding a payor, this should be the payee entity ID. If no connected entity ID is provided, the onboarding link will be for a standalone entity.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage connectedEntityId(String connectedEntityId) {
            this.connectedEntityId = Optional.of(connectedEntityId);
            return this;
        }

        @Override
        @JsonSetter(value = "connectedEntityId", nulls = Nulls.SKIP)
        public _FinalStage connectedEntityId(Optional<String> connectedEntityId) {
            this.connectedEntityId = connectedEntityId;
            return this;
        }

        @Override
        public SendOnboardingLink build() {
            return new SendOnboardingLink(type, connectedEntityId);
        }
    }
}
