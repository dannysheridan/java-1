/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.entitytypes.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = FindNotificationResponse.Builder.class)
public final class FindNotificationResponse {
    private final int count;

    private final boolean hasMore;

    private final List<NotificationResponse> data;

    private FindNotificationResponse(int count, boolean hasMore, List<NotificationResponse> data) {
        this.count = count;
        this.hasMore = hasMore;
        this.data = data;
    }

    /**
     * @return Total number of notifications for the given start and end date filters. This value is not limited by the limit parameter. It is provided so that you can determine how many pages of results are available.
     */
    @JsonProperty("count")
    public int getCount() {
        return count;
    }

    /**
     * @return True if there are more notifications available for the given start and end date filters.
     */
    @JsonProperty("hasMore")
    public boolean getHasMore() {
        return hasMore;
    }

    @JsonProperty("data")
    public List<NotificationResponse> getData() {
        return data;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FindNotificationResponse && equalTo((FindNotificationResponse) other);
    }

    private boolean equalTo(FindNotificationResponse other) {
        return count == other.count && hasMore == other.hasMore && data.equals(other.data);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.count, this.hasMore, this.data);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CountStage builder() {
        return new Builder();
    }

    public interface CountStage {
        HasMoreStage count(int count);

        Builder from(FindNotificationResponse other);
    }

    public interface HasMoreStage {
        _FinalStage hasMore(boolean hasMore);
    }

    public interface _FinalStage {
        FindNotificationResponse build();

        _FinalStage data(List<NotificationResponse> data);

        _FinalStage addData(NotificationResponse data);

        _FinalStage addAllData(List<NotificationResponse> data);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CountStage, HasMoreStage, _FinalStage {
        private int count;

        private boolean hasMore;

        private List<NotificationResponse> data = new ArrayList<>();

        private Builder() {}

        @Override
        public Builder from(FindNotificationResponse other) {
            count(other.getCount());
            hasMore(other.getHasMore());
            data(other.getData());
            return this;
        }

        /**
         * <p>Total number of notifications for the given start and end date filters. This value is not limited by the limit parameter. It is provided so that you can determine how many pages of results are available.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("count")
        public HasMoreStage count(int count) {
            this.count = count;
            return this;
        }

        /**
         * <p>True if there are more notifications available for the given start and end date filters.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("hasMore")
        public _FinalStage hasMore(boolean hasMore) {
            this.hasMore = hasMore;
            return this;
        }

        @Override
        public _FinalStage addAllData(List<NotificationResponse> data) {
            this.data.addAll(data);
            return this;
        }

        @Override
        public _FinalStage addData(NotificationResponse data) {
            this.data.add(data);
            return this;
        }

        @Override
        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public _FinalStage data(List<NotificationResponse> data) {
            this.data.clear();
            this.data.addAll(data);
            return this;
        }

        @Override
        public FindNotificationResponse build() {
            return new FindNotificationResponse(count, hasMore, data);
        }
    }
}
