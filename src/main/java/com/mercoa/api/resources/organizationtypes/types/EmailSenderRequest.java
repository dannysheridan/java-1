/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.organizationtypes.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = EmailSenderRequest.Builder.class)
public final class EmailSenderRequest {
    private final EmailSenderProvider provider;

    private final String fromEmail;

    private final String fromName;

    private final Optional<String> apiKey;

    private EmailSenderRequest(
            EmailSenderProvider provider, String fromEmail, String fromName, Optional<String> apiKey) {
        this.provider = provider;
        this.fromEmail = fromEmail;
        this.fromName = fromName;
        this.apiKey = apiKey;
    }

    @JsonProperty("provider")
    public EmailSenderProvider getProvider() {
        return provider;
    }

    @JsonProperty("fromEmail")
    public String getFromEmail() {
        return fromEmail;
    }

    @JsonProperty("fromName")
    public String getFromName() {
        return fromName;
    }

    @JsonProperty("apiKey")
    public Optional<String> getApiKey() {
        return apiKey;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EmailSenderRequest && equalTo((EmailSenderRequest) other);
    }

    private boolean equalTo(EmailSenderRequest other) {
        return provider.equals(other.provider)
                && fromEmail.equals(other.fromEmail)
                && fromName.equals(other.fromName)
                && apiKey.equals(other.apiKey);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.provider, this.fromEmail, this.fromName, this.apiKey);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ProviderStage builder() {
        return new Builder();
    }

    public interface ProviderStage {
        FromEmailStage provider(EmailSenderProvider provider);

        Builder from(EmailSenderRequest other);
    }

    public interface FromEmailStage {
        FromNameStage fromEmail(String fromEmail);
    }

    public interface FromNameStage {
        _FinalStage fromName(String fromName);
    }

    public interface _FinalStage {
        EmailSenderRequest build();

        _FinalStage apiKey(Optional<String> apiKey);

        _FinalStage apiKey(String apiKey);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ProviderStage, FromEmailStage, FromNameStage, _FinalStage {
        private EmailSenderProvider provider;

        private String fromEmail;

        private String fromName;

        private Optional<String> apiKey = Optional.empty();

        private Builder() {}

        @Override
        public Builder from(EmailSenderRequest other) {
            provider(other.getProvider());
            fromEmail(other.getFromEmail());
            fromName(other.getFromName());
            apiKey(other.getApiKey());
            return this;
        }

        @Override
        @JsonSetter("provider")
        public FromEmailStage provider(EmailSenderProvider provider) {
            this.provider = provider;
            return this;
        }

        @Override
        @JsonSetter("fromEmail")
        public FromNameStage fromEmail(String fromEmail) {
            this.fromEmail = fromEmail;
            return this;
        }

        @Override
        @JsonSetter("fromName")
        public _FinalStage fromName(String fromName) {
            this.fromName = fromName;
            return this;
        }

        @Override
        public _FinalStage apiKey(String apiKey) {
            this.apiKey = Optional.of(apiKey);
            return this;
        }

        @Override
        @JsonSetter(value = "apiKey", nulls = Nulls.SKIP)
        public _FinalStage apiKey(Optional<String> apiKey) {
            this.apiKey = apiKey;
            return this;
        }

        @Override
        public EmailSenderRequest build() {
            return new EmailSenderRequest(provider, fromEmail, fromName, apiKey);
        }
    }
}
