/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = PaymentMethodSchemaRequest.Builder.class)
public final class PaymentMethodSchemaRequest {
    private final String name;

    private final boolean isSource;

    private final boolean isDestination;

    private final Optional<List<CurrencyCode>> supportedCurrencies;

    private final List<PaymentMethodSchemaField> fields;

    private final Map<String, Object> additionalProperties;

    private PaymentMethodSchemaRequest(
            String name,
            boolean isSource,
            boolean isDestination,
            Optional<List<CurrencyCode>> supportedCurrencies,
            List<PaymentMethodSchemaField> fields,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.isSource = isSource;
        this.isDestination = isDestination;
        this.supportedCurrencies = supportedCurrencies;
        this.fields = fields;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return This payment method can be used as a payment source for an invoice
     */
    @JsonProperty("isSource")
    public boolean getIsSource() {
        return isSource;
    }

    /**
     * @return This payment method can be used as a payment destination for an invoice
     */
    @JsonProperty("isDestination")
    public boolean getIsDestination() {
        return isDestination;
    }

    /**
     * @return List of currencies that this payment method supports. If not provided, the payment method will support only USD.
     */
    @JsonProperty("supportedCurrencies")
    public Optional<List<CurrencyCode>> getSupportedCurrencies() {
        return supportedCurrencies;
    }

    @JsonProperty("fields")
    public List<PaymentMethodSchemaField> getFields() {
        return fields;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentMethodSchemaRequest && equalTo((PaymentMethodSchemaRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentMethodSchemaRequest other) {
        return name.equals(other.name)
                && isSource == other.isSource
                && isDestination == other.isDestination
                && supportedCurrencies.equals(other.supportedCurrencies)
                && fields.equals(other.fields);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.name, this.isSource, this.isDestination, this.supportedCurrencies, this.fields);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        IsSourceStage name(String name);

        Builder from(PaymentMethodSchemaRequest other);
    }

    public interface IsSourceStage {
        IsDestinationStage isSource(boolean isSource);
    }

    public interface IsDestinationStage {
        _FinalStage isDestination(boolean isDestination);
    }

    public interface _FinalStage {
        PaymentMethodSchemaRequest build();

        _FinalStage supportedCurrencies(Optional<List<CurrencyCode>> supportedCurrencies);

        _FinalStage supportedCurrencies(List<CurrencyCode> supportedCurrencies);

        _FinalStage fields(List<PaymentMethodSchemaField> fields);

        _FinalStage addFields(PaymentMethodSchemaField fields);

        _FinalStage addAllFields(List<PaymentMethodSchemaField> fields);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, IsSourceStage, IsDestinationStage, _FinalStage {
        private String name;

        private boolean isSource;

        private boolean isDestination;

        private List<PaymentMethodSchemaField> fields = new ArrayList<>();

        private Optional<List<CurrencyCode>> supportedCurrencies = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(PaymentMethodSchemaRequest other) {
            name(other.getName());
            isSource(other.getIsSource());
            isDestination(other.getIsDestination());
            supportedCurrencies(other.getSupportedCurrencies());
            fields(other.getFields());
            return this;
        }

        @Override
        @JsonSetter("name")
        public IsSourceStage name(String name) {
            this.name = name;
            return this;
        }

        /**
         * <p>This payment method can be used as a payment source for an invoice</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("isSource")
        public IsDestinationStage isSource(boolean isSource) {
            this.isSource = isSource;
            return this;
        }

        /**
         * <p>This payment method can be used as a payment destination for an invoice</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("isDestination")
        public _FinalStage isDestination(boolean isDestination) {
            this.isDestination = isDestination;
            return this;
        }

        @Override
        public _FinalStage addAllFields(List<PaymentMethodSchemaField> fields) {
            this.fields.addAll(fields);
            return this;
        }

        @Override
        public _FinalStage addFields(PaymentMethodSchemaField fields) {
            this.fields.add(fields);
            return this;
        }

        @Override
        @JsonSetter(value = "fields", nulls = Nulls.SKIP)
        public _FinalStage fields(List<PaymentMethodSchemaField> fields) {
            this.fields.clear();
            this.fields.addAll(fields);
            return this;
        }

        /**
         * <p>List of currencies that this payment method supports. If not provided, the payment method will support only USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage supportedCurrencies(List<CurrencyCode> supportedCurrencies) {
            this.supportedCurrencies = Optional.of(supportedCurrencies);
            return this;
        }

        @Override
        @JsonSetter(value = "supportedCurrencies", nulls = Nulls.SKIP)
        public _FinalStage supportedCurrencies(Optional<List<CurrencyCode>> supportedCurrencies) {
            this.supportedCurrencies = supportedCurrencies;
            return this;
        }

        @Override
        public PaymentMethodSchemaRequest build() {
            return new PaymentMethodSchemaRequest(
                    name, isSource, isDestination, supportedCurrencies, fields, additionalProperties);
        }
    }
}
