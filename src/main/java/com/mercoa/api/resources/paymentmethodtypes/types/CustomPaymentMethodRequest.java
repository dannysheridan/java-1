/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = CustomPaymentMethodRequest.Builder.class)
public final class CustomPaymentMethodRequest implements IPaymentMethodBaseRequest {
    private final Optional<Boolean> defaultSource;

    private final Optional<Boolean> defaultDestination;

    private final String foreignId;

    private final Optional<String> accountName;

    private final Optional<String> accountNumber;

    private final String schemaId;

    private final Map<String, String> data;

    private CustomPaymentMethodRequest(
            Optional<Boolean> defaultSource,
            Optional<Boolean> defaultDestination,
            String foreignId,
            Optional<String> accountName,
            Optional<String> accountNumber,
            String schemaId,
            Map<String, String> data) {
        this.defaultSource = defaultSource;
        this.defaultDestination = defaultDestination;
        this.foreignId = foreignId;
        this.accountName = accountName;
        this.accountNumber = accountNumber;
        this.schemaId = schemaId;
        this.data = data;
    }

    /**
     * @return If true, this payment method will be set as the default source. Only one payment method can be set as the default source. If another payment method is already set as the default source, it will be unset.
     */
    @JsonProperty("defaultSource")
    @Override
    public Optional<Boolean> getDefaultSource() {
        return defaultSource;
    }

    /**
     * @return If true, this payment method will be set as the default destination. Only one payment method can be set as the default destination. If another payment method is already set as the default destination, it will be unset.
     */
    @JsonProperty("defaultDestination")
    @Override
    public Optional<Boolean> getDefaultDestination() {
        return defaultDestination;
    }

    /**
     * @return ID for this payment method in your system
     */
    @JsonProperty("foreignId")
    public String getForeignId() {
        return foreignId;
    }

    @JsonProperty("accountName")
    public Optional<String> getAccountName() {
        return accountName;
    }

    @JsonProperty("accountNumber")
    public Optional<String> getAccountNumber() {
        return accountNumber;
    }

    /**
     * @return Payment method schema used for this payment method. Defines the fields that this payment method contains.
     */
    @JsonProperty("schemaId")
    public String getSchemaId() {
        return schemaId;
    }

    /**
     * @return Object of key/value pairs that matches the keys in the linked payment method schema.
     */
    @JsonProperty("data")
    public Map<String, String> getData() {
        return data;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomPaymentMethodRequest && equalTo((CustomPaymentMethodRequest) other);
    }

    private boolean equalTo(CustomPaymentMethodRequest other) {
        return defaultSource.equals(other.defaultSource)
                && defaultDestination.equals(other.defaultDestination)
                && foreignId.equals(other.foreignId)
                && accountName.equals(other.accountName)
                && accountNumber.equals(other.accountNumber)
                && schemaId.equals(other.schemaId)
                && data.equals(other.data);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                this.defaultSource,
                this.defaultDestination,
                this.foreignId,
                this.accountName,
                this.accountNumber,
                this.schemaId,
                this.data);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ForeignIdStage builder() {
        return new Builder();
    }

    public interface ForeignIdStage {
        SchemaIdStage foreignId(String foreignId);

        Builder from(CustomPaymentMethodRequest other);
    }

    public interface SchemaIdStage {
        _FinalStage schemaId(String schemaId);
    }

    public interface _FinalStage {
        CustomPaymentMethodRequest build();

        _FinalStage defaultSource(Optional<Boolean> defaultSource);

        _FinalStage defaultSource(Boolean defaultSource);

        _FinalStage defaultDestination(Optional<Boolean> defaultDestination);

        _FinalStage defaultDestination(Boolean defaultDestination);

        _FinalStage accountName(Optional<String> accountName);

        _FinalStage accountName(String accountName);

        _FinalStage accountNumber(Optional<String> accountNumber);

        _FinalStage accountNumber(String accountNumber);

        _FinalStage data(Map<String, String> data);

        _FinalStage putAllData(Map<String, String> data);

        _FinalStage data(String key, String value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ForeignIdStage, SchemaIdStage, _FinalStage {
        private String foreignId;

        private String schemaId;

        private Map<String, String> data = new LinkedHashMap<>();

        private Optional<String> accountNumber = Optional.empty();

        private Optional<String> accountName = Optional.empty();

        private Optional<Boolean> defaultDestination = Optional.empty();

        private Optional<Boolean> defaultSource = Optional.empty();

        private Builder() {}

        @Override
        public Builder from(CustomPaymentMethodRequest other) {
            defaultSource(other.getDefaultSource());
            defaultDestination(other.getDefaultDestination());
            foreignId(other.getForeignId());
            accountName(other.getAccountName());
            accountNumber(other.getAccountNumber());
            schemaId(other.getSchemaId());
            data(other.getData());
            return this;
        }

        /**
         * <p>ID for this payment method in your system</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("foreignId")
        public SchemaIdStage foreignId(String foreignId) {
            this.foreignId = foreignId;
            return this;
        }

        /**
         * <p>Payment method schema used for this payment method. Defines the fields that this payment method contains.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("schemaId")
        public _FinalStage schemaId(String schemaId) {
            this.schemaId = schemaId;
            return this;
        }

        /**
         * <p>Object of key/value pairs that matches the keys in the linked payment method schema.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage data(String key, String value) {
            this.data.put(key, value);
            return this;
        }

        /**
         * <p>Object of key/value pairs that matches the keys in the linked payment method schema.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage putAllData(Map<String, String> data) {
            this.data.putAll(data);
            return this;
        }

        @Override
        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public _FinalStage data(Map<String, String> data) {
            this.data.clear();
            this.data.putAll(data);
            return this;
        }

        @Override
        public _FinalStage accountNumber(String accountNumber) {
            this.accountNumber = Optional.of(accountNumber);
            return this;
        }

        @Override
        @JsonSetter(value = "accountNumber", nulls = Nulls.SKIP)
        public _FinalStage accountNumber(Optional<String> accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }

        @Override
        public _FinalStage accountName(String accountName) {
            this.accountName = Optional.of(accountName);
            return this;
        }

        @Override
        @JsonSetter(value = "accountName", nulls = Nulls.SKIP)
        public _FinalStage accountName(Optional<String> accountName) {
            this.accountName = accountName;
            return this;
        }

        /**
         * <p>If true, this payment method will be set as the default destination. Only one payment method can be set as the default destination. If another payment method is already set as the default destination, it will be unset.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage defaultDestination(Boolean defaultDestination) {
            this.defaultDestination = Optional.of(defaultDestination);
            return this;
        }

        @Override
        @JsonSetter(value = "defaultDestination", nulls = Nulls.SKIP)
        public _FinalStage defaultDestination(Optional<Boolean> defaultDestination) {
            this.defaultDestination = defaultDestination;
            return this;
        }

        /**
         * <p>If true, this payment method will be set as the default source. Only one payment method can be set as the default source. If another payment method is already set as the default source, it will be unset.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage defaultSource(Boolean defaultSource) {
            this.defaultSource = Optional.of(defaultSource);
            return this;
        }

        @Override
        @JsonSetter(value = "defaultSource", nulls = Nulls.SKIP)
        public _FinalStage defaultSource(Optional<Boolean> defaultSource) {
            this.defaultSource = defaultSource;
            return this;
        }

        @Override
        public CustomPaymentMethodRequest build() {
            return new CustomPaymentMethodRequest(
                    defaultSource, defaultDestination, foreignId, accountName, accountNumber, schemaId, data);
        }
    }
}
