/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.mercoa.api.resources.paymentmethodtypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.mercoa.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = PlaidLinkRequest.Builder.class)
public final class PlaidLinkRequest {
    private final Optional<String> accountId;

    private final Optional<String> publicToken;

    private final Map<String, Object> additionalProperties;

    private PlaidLinkRequest(
            Optional<String> accountId, Optional<String> publicToken, Map<String, Object> additionalProperties) {
        this.accountId = accountId;
        this.publicToken = publicToken;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Account ID from Plaid Link
     */
    @JsonProperty("accountId")
    public Optional<String> getAccountId() {
        return accountId;
    }

    /**
     * @return Public token from Plaid Link
     */
    @JsonProperty("publicToken")
    public Optional<String> getPublicToken() {
        return publicToken;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PlaidLinkRequest && equalTo((PlaidLinkRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PlaidLinkRequest other) {
        return accountId.equals(other.accountId) && publicToken.equals(other.publicToken);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.accountId, this.publicToken);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> accountId = Optional.empty();

        private Optional<String> publicToken = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PlaidLinkRequest other) {
            accountId(other.getAccountId());
            publicToken(other.getPublicToken());
            return this;
        }

        @JsonSetter(value = "accountId", nulls = Nulls.SKIP)
        public Builder accountId(Optional<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            this.accountId = Optional.of(accountId);
            return this;
        }

        @JsonSetter(value = "publicToken", nulls = Nulls.SKIP)
        public Builder publicToken(Optional<String> publicToken) {
            this.publicToken = publicToken;
            return this;
        }

        public Builder publicToken(String publicToken) {
            this.publicToken = Optional.of(publicToken);
            return this;
        }

        public PlaidLinkRequest build() {
            return new PlaidLinkRequest(accountId, publicToken, additionalProperties);
        }
    }
}
